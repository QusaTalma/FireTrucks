/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import level.model.*;

/**
 *
 * @author asheehan
 */
public class LevelEditorUI extends javax.swing.JFrame {
    private Level level;

    /**
     * Creates new form LevelEditorUI
     */
    public LevelEditorUI() {
        initComponents();
        
        level = new Level();
        
        SpinnerModel widthSpinnerModel = new SpinnerNumberModel(Level.MIN_WIDTH,
                Level.MIN_WIDTH, Level.MAX_WIDTH, 1);
        widthSpinner.setModel(widthSpinnerModel);
        widthSpinner.addChangeListener(new WidthSpinnerChangeListener());
        
        SpinnerModel heightSpinnerModel = new SpinnerNumberModel(Level.MIN_HEIGHT,
                Level.MIN_HEIGHT, Level.MAX_HEIGHT, 1);
        heightSpinner.setModel(heightSpinnerModel);
        heightSpinner.addChangeListener(new HeightSpinnerChangeListener());
        
        SpinnerModel durationSpinnerModel = new SpinnerNumberModel(Level.DEFAULT_DURATION,
            Level.MIN_DURATION, Level.MAX_DURATION, 1);
        durationSpinner.setModel(durationSpinnerModel);
        durationSpinner.addChangeListener(new DurationSpinnerChangeListener());
        
        SpinnerModel winSpinnerModel = new SpinnerNumberModel(Level.DEFAULT_PERCENT,
            Level.MIN_PERCENT, Level.MAX_PERCENT, 1);
        winSpinner.setModel(winSpinnerModel);
        winSpinner.addChangeListener(new WinSpinnerChangeListener());
        
        mapPanel.updateMap(level);
        mapPanel.addMouseListener(new PanelMouseListener());
        
        tileButtonGroup.add(streetRadioButton);
        tileButtonGroup.add(houseRadioButton);
        tileButtonGroup.add(fireStationRadioButton);
        tileButtonGroup.add(cityFillRadioButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tileButtonGroup = new javax.swing.ButtonGroup();
        mapScrollPane = new javax.swing.JScrollPane();
        mapPanel = new ui.MapPanel();
        widthSpinner = new javax.swing.JSpinner();
        heightSpinner = new javax.swing.JSpinner();
        widthLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        durationLabel = new javax.swing.JLabel();
        percentLabel = new javax.swing.JLabel();
        durationSpinner = new javax.swing.JSpinner();
        winSpinner = new javax.swing.JSpinner();
        streetRadioButton = new javax.swing.JRadioButton();
        houseRadioButton = new javax.swing.JRadioButton();
        fireStationRadioButton = new javax.swing.JRadioButton();
        cityFillRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(10000, 10000));
        setPreferredSize(new java.awt.Dimension(800, 600));

        mapScrollPane.setPreferredSize(new java.awt.Dimension(256, 256));
        mapScrollPane.setRequestFocusEnabled(false);
        mapScrollPane.setSize(new java.awt.Dimension(256, 256));

        mapPanel.setPreferredSize(new java.awt.Dimension(1024, 1024));

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
        );

        mapScrollPane.setViewportView(mapPanel);

        widthLabel.setText("Width");

        heightLabel.setText("Height");

        durationLabel.setText("Level Duration");

        percentLabel.setText("Percent to win");

        streetRadioButton.setSelected(true);
        streetRadioButton.setText("Street");

        houseRadioButton.setText("House");

        fireStationRadioButton.setText("Fire Station");

        cityFillRadioButton.setText("Fill");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(widthLabel)
                            .addComponent(heightLabel)
                            .addComponent(durationLabel)
                            .addComponent(percentLabel))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(widthSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                            .addComponent(heightSpinner)
                            .addComponent(durationSpinner)
                            .addComponent(winSpinner)))
                    .addComponent(streetRadioButton)
                    .addComponent(houseRadioButton)
                    .addComponent(fireStationRadioButton)
                    .addComponent(cityFillRadioButton))
                .addContainerGap(312, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(widthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(widthLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(heightSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heightLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(durationLabel)
                            .addComponent(durationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(percentLabel)
                            .addComponent(winSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(streetRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(houseRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fireStationRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cityFillRadioButton))
                    .addComponent(mapScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(506, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton cityFillRadioButton;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JSpinner durationSpinner;
    private javax.swing.JRadioButton fireStationRadioButton;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JSpinner heightSpinner;
    private javax.swing.JRadioButton houseRadioButton;
    private ui.MapPanel mapPanel;
    private javax.swing.JScrollPane mapScrollPane;
    private javax.swing.JLabel percentLabel;
    private javax.swing.JRadioButton streetRadioButton;
    private javax.swing.ButtonGroup tileButtonGroup;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JSpinner widthSpinner;
    private javax.swing.JSpinner winSpinner;
    // End of variables declaration//GEN-END:variables
    
    private class PanelMouseListener implements MouseListener{
        private MapPanelMouseMoveListener moveListener = null;
        @Override
        public void mouseClicked(MouseEvent e) {}

        @Override
        public void mousePressed(MouseEvent e) {
            moveListener = new MapPanelMouseMoveListener();
            mapPanel.addMouseMotionListener(moveListener);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            if(moveListener != null){
                mapPanel.removeMouseMotionListener(moveListener);
                moveListener = null;
            }
        }

        @Override
        public void mouseEntered(MouseEvent e) {}

        @Override
        public void mouseExited(MouseEvent e) {
            if(moveListener != null){
                mapPanel.removeMouseMotionListener(moveListener);
                moveListener = null;
            }
        }
    }
    
    private class MapPanelMouseMoveListener implements MouseMotionListener{
        private int prevX = -1;
        private int prevY = -1;

        @Override
        public void mouseDragged(MouseEvent e) {
            int x = (int)Math.floor(e.getX() / (float)MapPanel.TILE_SIZE);
            int y = (int)Math.floor(e.getY() / (float)MapPanel.TILE_SIZE);
            
            if(x != prevX || y != prevY){
                prevX = x;
                prevY = y;
            
                Tile toSet = null;

                if(streetRadioButton.isSelected()){
                    toSet = Tile.STREET;
                }else if(houseRadioButton.isSelected()){
                    toSet = Tile.HOUSE;
                }else if(fireStationRadioButton.isSelected()){
                    toSet = Tile.FIRE_STATION;
                }else if(cityFillRadioButton.isSelected()){
                    toSet = Tile.CITY_FILL;
                }

                if(toSet != null){
                    if(x < level.getWidth() && y < level.getHeight()){
                        level.getMap().getTileMap()[x][y] = toSet;
                        mapPanel.updateMap(level);
                    }
                }
            }
        }

        @Override
        public void mouseMoved(MouseEvent e) {}
    }
    
    private class WidthSpinnerChangeListener implements ChangeListener{
        @Override
        public void stateChanged(ChangeEvent e) {
            JSpinner source = (JSpinner)e.getSource();
            int newWidth = (int)source.getValue();
            level.resize(newWidth, level.getHeight());
            mapPanel.updateMap(level);
        }
    }
    
    private class HeightSpinnerChangeListener implements ChangeListener{
        @Override
        public void stateChanged(ChangeEvent e) {
            JSpinner source = (JSpinner)e.getSource();
            int newHeight = (int)source.getValue();
            level.resize(level.getWidth(), newHeight);
            mapPanel.updateMap(level);
        }
    }
    
    private class DurationSpinnerChangeListener implements ChangeListener{
        @Override
        public void stateChanged(ChangeEvent e) {
            JSpinner source = (JSpinner)e.getSource();
            int newDuration = (int)source.getValue();
            level.setDurationSeconds(newDuration);
        }
    }
    
    private class WinSpinnerChangeListener implements ChangeListener{
        @Override
        public void stateChanged(ChangeEvent e) {
            JSpinner source = (JSpinner)e.getSource();
            int newWin = (int)source.getValue();
            level.setWinPercent(newWin);
        }
    }
}